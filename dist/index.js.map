{"version":3,"sources":["../src/index.ts","../src/util/builders/mysql.ts","../src/util/builders/common.ts","../src/util/case-ops/index.ts","../src/util/data-mappers/index.ts","../src/util/type-converter/index.ts","../src/util/type-converter/GraphQLJson.ts","../src/util/builders/pg.ts","../src/util/builders/sqlite.ts"],"sourcesContent":["import { is } from 'drizzle-orm';\nimport { MySqlDatabase } from 'drizzle-orm/mysql-core';\nimport { PgDatabase } from 'drizzle-orm/pg-core';\nimport { BaseSQLiteDatabase } from 'drizzle-orm/sqlite-core';\nimport {\n\tGraphQLFieldConfig,\n\tGraphQLInputObjectType,\n\tGraphQLObjectType,\n\tGraphQLSchema,\n\tGraphQLSchemaConfig,\n} from 'graphql';\n\nimport { generateMySQL, generatePG, generateSQLite } from '@/util/builders';\nimport { ObjMap } from 'graphql/jsutils/ObjMap';\nimport type { AnyDrizzleDB, BuildSchemaConfig, GeneratedData } from './types';\n\nexport const buildSchema = <TDbClient extends AnyDrizzleDB<any>>(\n\tdb: TDbClient,\n\tconfig?: BuildSchemaConfig,\n): GeneratedData<TDbClient> => {\n\tconst schema = db._.fullSchema;\n\tif (!schema) {\n\t\tthrow new Error(\n\t\t\t\"Drizzle-GraphQL Error: Schema not found in drizzle instance. Make sure you're using drizzle-orm v0.30.9 or above and schema is passed to drizzle constructor!\",\n\t\t);\n\t}\n\n\tif (typeof config?.relationsDepthLimit === 'number') {\n\t\tif (config.relationsDepthLimit < 0) {\n\t\t\tthrow new Error(\n\t\t\t\t'Drizzle-GraphQL Error: config.relationsDepthLimit is supposed to be nonnegative integer or undefined!',\n\t\t\t);\n\t\t}\n\t\tif (config.relationsDepthLimit !== ~~config.relationsDepthLimit) {\n\t\t\tthrow new Error(\n\t\t\t\t'Drizzle-GraphQL Error: config.relationsDepthLimit is supposed to be nonnegative integer or undefined!',\n\t\t\t);\n\t\t}\n\t}\n\n\tlet generatorOutput;\n\tif (is(db, MySqlDatabase)) {\n\t\tgeneratorOutput = generateMySQL(db, schema, config?.relationsDepthLimit);\n\t} else if (is(db, PgDatabase)) {\n\t\tgeneratorOutput = generatePG(db, schema, config?.relationsDepthLimit);\n\t} else if (is(db, BaseSQLiteDatabase)) {\n\t\tgeneratorOutput = generateSQLite(db, schema, config?.relationsDepthLimit);\n\t} else throw new Error('Drizzle-GraphQL Error: Unknown database instance type');\n\n\tconst { queries, mutations, inputs, types } = generatorOutput;\n\n\tconst graphQLSchemaConfig: GraphQLSchemaConfig = {\n\t\ttypes: [...Object.values(inputs), ...Object.values(types)] as (GraphQLInputObjectType | GraphQLObjectType)[],\n\t\tquery: new GraphQLObjectType({\n\t\t\tname: 'Query',\n\t\t\tfields: queries as ObjMap<GraphQLFieldConfig<any, any, any>>,\n\t\t}),\n\t};\n\n\tif (config?.mutations !== false) {\n\t\tconst mutation = new GraphQLObjectType({\n\t\t\tname: 'Mutation',\n\t\t\tfields: mutations as ObjMap<GraphQLFieldConfig<any, any, any>>,\n\t\t});\n\n\t\tgraphQLSchemaConfig.mutation = mutation;\n\t}\n\n\tconst outputSchema = new GraphQLSchema(graphQLSchemaConfig);\n\n\treturn { schema: outputSchema, entities: generatorOutput };\n};\n\nexport * from './types';\n","import { createTableRelationsHelpers, is, Relation, Relations, Table } from 'drizzle-orm';\nimport { MySqlDatabase, MySqlTable } from 'drizzle-orm/mysql-core';\nimport {\n\tGraphQLBoolean,\n\tGraphQLError,\n\tGraphQLInputObjectType,\n\tGraphQLInt,\n\tGraphQLList,\n\tGraphQLNonNull,\n\tGraphQLObjectType,\n} from 'graphql';\n\nimport {\n\textractFilters,\n\textractOrderBy,\n\textractRelationsParams,\n\textractSelectedColumnsFromTree,\n\tgenerateTableTypes,\n} from '@/util/builders/common';\nimport { capitalize, uncapitalize } from '@/util/case-ops';\nimport {\n\tremapFromGraphQLArrayInput,\n\tremapFromGraphQLSingleInput,\n\tremapToGraphQLArrayOutput,\n\tremapToGraphQLSingleOutput,\n} from '@/util/data-mappers';\nimport { parseResolveInfo } from 'graphql-parse-resolve-info';\n\nimport type { GeneratedEntities } from '@/types';\nimport type { RelationalQueryBuilder } from 'drizzle-orm/mysql-core/query-builders/query';\nimport type { GraphQLFieldConfig, GraphQLFieldConfigArgumentMap, ThunkObjMap } from 'graphql';\nimport type { ResolveTree } from 'graphql-parse-resolve-info';\nimport type { CreatedResolver, Filters, TableNamedRelations, TableSelectArgs } from './types';\n\nconst generateSelectArray = (\n\tdb: MySqlDatabase<any, any, any>,\n\ttableName: string,\n\ttables: Record<string, Table>,\n\trelationMap: Record<string, Record<string, TableNamedRelations>>,\n\torderArgs: GraphQLInputObjectType,\n\tfilterArgs: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `${uncapitalize(tableName)}`;\n\tconst queryBase = db.query[tableName as keyof typeof db.query] as unknown as\n\t\t| RelationalQueryBuilder<any, any, any>\n\t\t| undefined;\n\tif (!queryBase) {\n\t\tthrow new Error(\n\t\t\t`Drizzle-GraphQL Error: Table ${tableName} not found in drizzle instance. Did you forget to pass schema to drizzle constructor?`,\n\t\t);\n\t}\n\n\tconst queryArgs = {\n\t\toffset: {\n\t\t\ttype: GraphQLInt,\n\t\t},\n\t\tlimit: {\n\t\t\ttype: GraphQLInt,\n\t\t},\n\t\torderBy: {\n\t\t\ttype: orderArgs,\n\t\t},\n\t\twhere: {\n\t\t\ttype: filterArgs,\n\t\t},\n\t} as GraphQLFieldConfigArgumentMap;\n\n\tconst typeName = `${capitalize(tableName)}SelectItem`;\n\tconst table = tables[tableName]!;\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: Partial<TableSelectArgs>, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst { offset, limit, orderBy, where } = args;\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst query = queryBase.findMany({\n\t\t\t\t\tcolumns: extractSelectedColumnsFromTree(\n\t\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\t\ttable,\n\t\t\t\t\t),\n\t\t\t\t\toffset,\n\t\t\t\t\tlimit,\n\t\t\t\t\torderBy: orderBy ? extractOrderBy(table, orderBy) : undefined,\n\t\t\t\t\twhere: where ? extractFilters(table, tableName, where) : undefined,\n\t\t\t\t\twith: relationMap[tableName]\n\t\t\t\t\t\t? extractRelationsParams(relationMap, tables, tableName, parsedInfo, typeName)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t});\n\n\t\t\t\tconst result = await query;\n\n\t\t\t\treturn remapToGraphQLArrayOutput(result, tableName, table, relationMap);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateSelectSingle = (\n\tdb: MySqlDatabase<any, any, any>,\n\ttableName: string,\n\ttables: Record<string, Table>,\n\trelationMap: Record<string, Record<string, TableNamedRelations>>,\n\torderArgs: GraphQLInputObjectType,\n\tfilterArgs: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `${uncapitalize(tableName)}Single`;\n\tconst queryBase = db.query[tableName as keyof typeof db.query] as unknown as\n\t\t| RelationalQueryBuilder<any, any, any>\n\t\t| undefined;\n\tif (!queryBase) {\n\t\tthrow new Error(\n\t\t\t`Drizzle-GraphQL Error: Table ${tableName} not found in drizzle instance. Did you forget to pass schema to drizzle constructor?`,\n\t\t);\n\t}\n\n\tconst queryArgs = {\n\t\toffset: {\n\t\t\ttype: GraphQLInt,\n\t\t},\n\t\torderBy: {\n\t\t\ttype: orderArgs,\n\t\t},\n\t\twhere: {\n\t\t\ttype: filterArgs,\n\t\t},\n\t} as GraphQLFieldConfigArgumentMap;\n\n\tconst typeName = `${capitalize(tableName)}SelectItem`;\n\tconst table = tables[tableName]!;\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: Partial<TableSelectArgs>, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst { offset, orderBy, where } = args;\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst query = queryBase.findFirst({\n\t\t\t\t\tcolumns: extractSelectedColumnsFromTree(\n\t\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\t\ttable,\n\t\t\t\t\t),\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy: orderBy ? extractOrderBy(table, orderBy) : undefined,\n\t\t\t\t\twhere: where ? extractFilters(table, tableName, where) : undefined,\n\t\t\t\t\twith: relationMap[tableName]\n\t\t\t\t\t\t? extractRelationsParams(relationMap, tables, tableName, parsedInfo, typeName)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t});\n\n\t\t\t\tconst result = await query;\n\t\t\t\tif (!result) return undefined;\n\n\t\t\t\treturn remapToGraphQLSingleOutput(result, tableName, table, relationMap);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateInsertArray = (\n\tdb: MySqlDatabase<any, any, any, any>,\n\ttableName: string,\n\ttable: MySqlTable,\n\tbaseType: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `insertInto${capitalize(tableName)}`;\n\n\tconst queryArgs: GraphQLFieldConfigArgumentMap = {\n\t\tvalues: {\n\t\t\ttype: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(baseType))),\n\t\t},\n\t};\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: { values: Record<string, any>[] }, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst input = remapFromGraphQLArrayInput(args.values, table);\n\t\t\t\tif (!input.length) throw new GraphQLError('No values were provided!');\n\n\t\t\t\tawait db.insert(table).values(input);\n\n\t\t\t\treturn { isSuccess: true };\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateInsertSingle = (\n\tdb: MySqlDatabase<any, any, any, any>,\n\ttableName: string,\n\ttable: MySqlTable,\n\tbaseType: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `insertInto${capitalize(tableName)}Single`;\n\n\tconst queryArgs: GraphQLFieldConfigArgumentMap = {\n\t\tvalues: {\n\t\t\ttype: new GraphQLNonNull(baseType),\n\t\t},\n\t};\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: { values: Record<string, any> }, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst input = remapFromGraphQLSingleInput(args.values, table);\n\n\t\t\t\tawait db.insert(table).values(input);\n\n\t\t\t\treturn { isSuccess: true };\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateUpdate = (\n\tdb: MySqlDatabase<any, any, any>,\n\ttableName: string,\n\ttable: MySqlTable,\n\tsetArgs: GraphQLInputObjectType,\n\tfilterArgs: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `update${capitalize(tableName)}`;\n\n\tconst queryArgs = {\n\t\tset: {\n\t\t\ttype: new GraphQLNonNull(setArgs),\n\t\t},\n\t\twhere: {\n\t\t\ttype: filterArgs,\n\t\t},\n\t} as const satisfies GraphQLFieldConfigArgumentMap;\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: { where?: Filters<Table>; set: Record<string, any> }, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst { where, set } = args;\n\n\t\t\t\tconst input = remapFromGraphQLSingleInput(set, table);\n\t\t\t\tif (!Object.keys(input).length) throw new GraphQLError('Unable to update with no values specified!');\n\n\t\t\t\tlet query = db.update(table).set(input);\n\t\t\t\tif (where) {\n\t\t\t\t\tconst filters = extractFilters(table, tableName, where);\n\t\t\t\t\tquery = query.where(filters) as any;\n\t\t\t\t}\n\n\t\t\t\tawait query;\n\n\t\t\t\treturn { isSuccess: true };\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateDelete = (\n\tdb: MySqlDatabase<any, any, any>,\n\ttableName: string,\n\ttable: MySqlTable,\n\tfilterArgs: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `deleteFrom${tableName}`;\n\n\tconst queryArgs = {\n\t\twhere: {\n\t\t\ttype: filterArgs,\n\t\t},\n\t} as const satisfies GraphQLFieldConfigArgumentMap;\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: { where?: Filters<Table> }, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst { where } = args;\n\n\t\t\t\tlet query = db.delete(table);\n\t\t\t\tif (where) {\n\t\t\t\t\tconst filters = extractFilters(table, tableName, where);\n\t\t\t\t\tquery = query.where(filters) as any;\n\t\t\t\t}\n\n\t\t\t\tawait query;\n\n\t\t\t\treturn { isSuccess: true };\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nexport const generateSchemaData = <\n\tTDrizzleInstance extends MySqlDatabase<any, any, any, any>,\n\tTSchema extends Record<string, Table | unknown>,\n>(\n\tdb: TDrizzleInstance,\n\tschema: TSchema,\n\trelationsDepthLimit: number | undefined,\n): GeneratedEntities<TDrizzleInstance, TSchema> => {\n\tconst rawSchema = schema;\n\tconst schemaEntries = Object.entries(rawSchema);\n\n\tconst tableEntries = schemaEntries.filter(([key, value]) => is(value, MySqlTable)) as [string, MySqlTable][];\n\tconst tables = Object.fromEntries(tableEntries);\n\n\tif (!tableEntries.length) {\n\t\tthrow new Error(\n\t\t\t\"Drizzle-GraphQL Error: No tables detected in Drizzle-ORM's database instance. Did you forget to pass schema to drizzle constructor?\",\n\t\t);\n\t}\n\n\tconst rawRelations = schemaEntries\n\t\t.filter(([key, value]) => is(value, Relations))\n\t\t.map<[string, Relations]>(([key, value]) => [\n\t\t\ttableEntries.find(\n\t\t\t\t([tableName, tableValue]) => tableValue === (value as Relations).table,\n\t\t\t)![0] as string,\n\t\t\tvalue as Relations,\n\t\t]).map<[string, Record<string, Relation>]>(([tableName, relValue]) => [\n\t\t\ttableName,\n\t\t\trelValue.config(createTableRelationsHelpers(tables[tableName]!)),\n\t\t]);\n\n\tconst namedRelations = Object.fromEntries(\n\t\trawRelations\n\t\t\t.map(([relName, config]) => {\n\t\t\t\tconst namedConfig: Record<string, TableNamedRelations> = Object.fromEntries(\n\t\t\t\t\tObject.entries(config).map(([innerRelName, innerRelValue]) => [innerRelName, {\n\t\t\t\t\t\trelation: innerRelValue,\n\t\t\t\t\t\ttargetTableName: tableEntries.find(([tableName, tableValue]) =>\n\t\t\t\t\t\t\ttableValue === innerRelValue.referencedTable\n\t\t\t\t\t\t)![0],\n\t\t\t\t\t}]),\n\t\t\t\t);\n\n\t\t\t\treturn [\n\t\t\t\t\trelName,\n\t\t\t\t\tnamedConfig,\n\t\t\t\t];\n\t\t\t}),\n\t);\n\n\tconst queries: ThunkObjMap<GraphQLFieldConfig<any, any>> = {};\n\tconst mutations: ThunkObjMap<GraphQLFieldConfig<any, any>> = {};\n\tconst gqlSchemaTypes = Object.fromEntries(\n\t\tObject.entries(tables).map(([tableName, table]) => [\n\t\t\ttableName,\n\t\t\tgenerateTableTypes(tableName, tables, namedRelations, false, relationsDepthLimit),\n\t\t]),\n\t);\n\n\tconst mutationReturnType = new GraphQLObjectType({\n\t\tname: `MutationReturn`,\n\t\tfields: {\n\t\t\tisSuccess: {\n\t\t\t\ttype: new GraphQLNonNull(GraphQLBoolean),\n\t\t\t},\n\t\t},\n\t});\n\n\tconst inputs: Record<string, GraphQLInputObjectType> = {};\n\tconst outputs: Record<string, GraphQLObjectType> = {\n\t\tMutationReturn: mutationReturnType,\n\t};\n\n\tfor (const [tableName, tableTypes] of Object.entries(gqlSchemaTypes)) {\n\t\tconst { insertInput, updateInput, tableFilters, tableOrder } = tableTypes.inputs;\n\t\tconst { selectSingleOutput, selectArrOutput } = tableTypes.outputs;\n\n\t\tconst selectArrGenerated = generateSelectArray(\n\t\t\tdb,\n\t\t\ttableName,\n\t\t\ttables,\n\t\t\tnamedRelations,\n\t\t\ttableOrder,\n\t\t\ttableFilters,\n\t\t);\n\t\tconst selectSingleGenerated = generateSelectSingle(\n\t\t\tdb,\n\t\t\ttableName,\n\t\t\ttables,\n\t\t\tnamedRelations,\n\t\t\ttableOrder,\n\t\t\ttableFilters,\n\t\t);\n\t\tconst insertArrGenerated = generateInsertArray(db, tableName, schema[tableName] as MySqlTable, insertInput);\n\t\tconst insertSingleGenerated = generateInsertSingle(db, tableName, schema[tableName] as MySqlTable, insertInput);\n\t\tconst updateGenerated = generateUpdate(\n\t\t\tdb,\n\t\t\ttableName,\n\t\t\tschema[tableName] as MySqlTable,\n\t\t\tupdateInput,\n\t\t\ttableFilters,\n\t\t);\n\t\tconst deleteGenerated = generateDelete(db, tableName, schema[tableName] as MySqlTable, tableFilters);\n\n\t\tqueries[selectArrGenerated.name] = {\n\t\t\ttype: selectArrOutput,\n\t\t\targs: selectArrGenerated.args,\n\t\t\tresolve: selectArrGenerated.resolver,\n\t\t};\n\t\tqueries[selectSingleGenerated.name] = {\n\t\t\ttype: selectSingleOutput,\n\t\t\targs: selectSingleGenerated.args,\n\t\t\tresolve: selectSingleGenerated.resolver,\n\t\t};\n\t\tmutations[insertArrGenerated.name] = {\n\t\t\ttype: mutationReturnType,\n\t\t\targs: insertArrGenerated.args,\n\t\t\tresolve: insertArrGenerated.resolver,\n\t\t};\n\t\tmutations[insertSingleGenerated.name] = {\n\t\t\ttype: mutationReturnType,\n\t\t\targs: insertSingleGenerated.args,\n\t\t\tresolve: insertSingleGenerated.resolver,\n\t\t};\n\t\tmutations[updateGenerated.name] = {\n\t\t\ttype: mutationReturnType,\n\t\t\targs: updateGenerated.args,\n\t\t\tresolve: updateGenerated.resolver,\n\t\t};\n\t\tmutations[deleteGenerated.name] = {\n\t\t\ttype: mutationReturnType,\n\t\t\targs: deleteGenerated.args,\n\t\t\tresolve: deleteGenerated.resolver,\n\t\t};\n\t\t[insertInput, updateInput, tableFilters, tableOrder].forEach((e) => (inputs[e.name] = e));\n\t\toutputs[selectSingleOutput.name] = selectSingleOutput;\n\t}\n\n\treturn { queries, mutations, inputs, types: outputs } as any;\n};\n","import {\n\tand,\n\tasc,\n\tdesc,\n\teq,\n\tgetTableColumns,\n\tgt,\n\tgte,\n\tilike,\n\tinArray,\n\tis,\n\tisNotNull,\n\tisNull,\n\tlike,\n\tlt,\n\tlte,\n\tne,\n\tnotIlike,\n\tnotInArray,\n\tnotLike,\n\tOne,\n\tor,\n\tSQL,\n} from 'drizzle-orm';\nimport {\n\tGraphQLBoolean,\n\tGraphQLEnumType,\n\tGraphQLError,\n\tGraphQLInputObjectType,\n\tGraphQLInt,\n\tGraphQLList,\n\tGraphQLNonNull,\n\tGraphQLObjectType,\n\tGraphQLString,\n} from 'graphql';\n\nimport { capitalize } from '@/util/case-ops';\nimport { remapFromGraphQLCore } from '@/util/data-mappers';\nimport {\n\tConvertedColumn,\n\tConvertedInputColumn,\n\tConvertedRelationColumnWithArgs,\n\tdrizzleColumnToGraphQLType,\n} from '@/util/type-converter';\n\nimport type { Column, Table } from 'drizzle-orm';\nimport type { ResolveTree } from 'graphql-parse-resolve-info';\nimport type {\n\tFilterColumnOperators,\n\tFilterColumnOperatorsCore,\n\tFilters,\n\tFiltersCore,\n\tGeneratedTableTypes,\n\tGeneratedTableTypesOutputs,\n\tOrderByArgs,\n\tProcessedTableSelectArgs,\n\tSelectData,\n\tSelectedColumnsRaw,\n\tSelectedSQLColumns,\n\tTableNamedRelations,\n\tTableSelectArgs,\n} from './types';\n\nconst rqbCrashTypes = [\n\t'SQLiteBigInt',\n\t'SQLiteBlobJson',\n\t'SQLiteBlobBuffer',\n];\n\nexport const extractSelectedColumnsFromTree = (\n\ttree: Record<string, ResolveTree>,\n\ttable: Table,\n): Record<string, true> => {\n\tconst tableColumns = getTableColumns(table);\n\n\tconst treeEntries = Object.entries(tree);\n\tconst selectedColumns: SelectedColumnsRaw = [];\n\n\tfor (const [fieldName, fieldData] of treeEntries) {\n\t\tif (!tableColumns[fieldData.name]) continue;\n\n\t\tselectedColumns.push([fieldData.name, true]);\n\t}\n\n\tif (!selectedColumns.length) {\n\t\tconst columnKeys = Object.entries(tableColumns);\n\t\tconst columnName = columnKeys.find((e) => rqbCrashTypes.find((haram) => e[1].columnType !== haram))?.[0]\n\t\t\t?? columnKeys[0]![0];\n\n\t\tselectedColumns.push([columnName, true]);\n\t}\n\n\treturn Object.fromEntries(selectedColumns);\n};\n\n/**\n * Can't automatically determine column type on type level\n * Since drizzle table types extend eachother\n */\nexport const extractSelectedColumnsFromTreeSQLFormat = <TColType extends Column = Column>(\n\ttree: Record<string, ResolveTree>,\n\ttable: Table,\n): Record<string, TColType> => {\n\tconst tableColumns = getTableColumns(table);\n\n\tconst treeEntries = Object.entries(tree);\n\tconst selectedColumns: SelectedSQLColumns = [];\n\n\tfor (const [fieldName, fieldData] of treeEntries) {\n\t\tif (!tableColumns[fieldData.name]) continue;\n\n\t\tselectedColumns.push([fieldData.name, tableColumns[fieldData.name]!]);\n\t}\n\n\tif (!selectedColumns.length) {\n\t\tconst columnKeys = Object.entries(tableColumns);\n\t\tconst columnName = columnKeys.find((e) => rqbCrashTypes.find((haram) => e[1].columnType !== haram))?.[0]\n\t\t\t?? columnKeys[0]![0];\n\n\t\tselectedColumns.push([columnName, tableColumns[columnName]!]);\n\t}\n\n\treturn Object.fromEntries(selectedColumns) as Record<string, TColType>;\n};\n\nexport const innerOrder = new GraphQLInputObjectType({\n\tname: 'InnerOrder' as const,\n\tfields: {\n\t\tdirection: {\n\t\t\ttype: new GraphQLNonNull(\n\t\t\t\tnew GraphQLEnumType({\n\t\t\t\t\tname: 'OrderDirection',\n\t\t\t\t\tdescription: 'Order by direction',\n\t\t\t\t\tvalues: {\n\t\t\t\t\t\tasc: {\n\t\t\t\t\t\t\tvalue: 'asc',\n\t\t\t\t\t\t\tdescription: 'Ascending order',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdesc: {\n\t\t\t\t\t\t\tvalue: 'desc',\n\t\t\t\t\t\t\tdescription: 'Descending order',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t),\n\t\t},\n\t\tpriority: { type: new GraphQLNonNull(GraphQLInt), description: 'Priority of current field' },\n\t} as const,\n});\n\nconst generateColumnFilterValues = (column: Column, tableName: string, columnName: string): GraphQLInputObjectType => {\n\tconst columnGraphQLType = drizzleColumnToGraphQLType(column, columnName, tableName, true, false, true);\n\tconst columnArr = new GraphQLList(new GraphQLNonNull(columnGraphQLType.type));\n\n\tconst baseFields = {\n\t\teq: { type: columnGraphQLType.type, description: columnGraphQLType.description },\n\t\tne: { type: columnGraphQLType.type, description: columnGraphQLType.description },\n\t\tlt: { type: columnGraphQLType.type, description: columnGraphQLType.description },\n\t\tlte: { type: columnGraphQLType.type, description: columnGraphQLType.description },\n\t\tgt: { type: columnGraphQLType.type, description: columnGraphQLType.description },\n\t\tgte: { type: columnGraphQLType.type, description: columnGraphQLType.description },\n\t\tlike: { type: GraphQLString },\n\t\tnotLike: { type: GraphQLString },\n\t\tilike: { type: GraphQLString },\n\t\tnotIlike: { type: GraphQLString },\n\t\tinArray: { type: columnArr, description: `Array<${columnGraphQLType.description}>` },\n\t\tnotInArray: { type: columnArr, description: `Array<${columnGraphQLType.description}>` },\n\t\tisNull: { type: GraphQLBoolean },\n\t\tisNotNull: { type: GraphQLBoolean },\n\t};\n\n\tconst type: GraphQLInputObjectType = new GraphQLInputObjectType({\n\t\tname: `${capitalize(tableName)}${capitalize(columnName)}Filters`,\n\t\tfields: {\n\t\t\t...baseFields,\n\t\t\tOR: {\n\t\t\t\ttype: new GraphQLList(\n\t\t\t\t\tnew GraphQLNonNull(\n\t\t\t\t\t\tnew GraphQLInputObjectType({\n\t\t\t\t\t\t\tname: `${capitalize(tableName)}${capitalize(columnName)}filtersOr`,\n\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t...baseFields,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t},\n\t\t},\n\t});\n\n\treturn type;\n};\n\nconst orderMap = new WeakMap<Object, Record<string, ConvertedInputColumn>>();\nconst generateTableOrderCached = (table: Table) => {\n\tif (orderMap.has(table)) return orderMap.get(table)!;\n\n\tconst columns = getTableColumns(table);\n\tconst columnEntries = Object.entries(columns);\n\n\tconst remapped = Object.fromEntries(\n\t\tcolumnEntries.map(([columnName, columnDescription]) => [columnName, { type: innerOrder }]),\n\t);\n\n\torderMap.set(table, remapped);\n\n\treturn remapped;\n};\n\nconst filterMap = new WeakMap<Object, Record<string, ConvertedInputColumn>>();\nconst generateTableFilterValuesCached = (table: Table, tableName: string) => {\n\tif (filterMap.has(table)) return filterMap.get(table)!;\n\n\tconst columns = getTableColumns(table);\n\tconst columnEntries = Object.entries(columns);\n\n\tconst remapped = Object.fromEntries(\n\t\tcolumnEntries.map(([columnName, columnDescription]) => [\n\t\t\tcolumnName,\n\t\t\t{\n\t\t\t\ttype: generateColumnFilterValues(columnDescription, tableName, columnName),\n\t\t\t},\n\t\t]),\n\t);\n\n\tfilterMap.set(table, remapped);\n\n\treturn remapped;\n};\n\nconst fieldMap = new WeakMap<Object, Record<string, ConvertedColumn>>();\nconst generateTableSelectTypeFieldsCached = (table: Table, tableName: string): Record<string, ConvertedColumn> => {\n\tif (fieldMap.has(table)) return fieldMap.get(table)!;\n\n\tconst columns = getTableColumns(table);\n\tconst columnEntries = Object.entries(columns);\n\n\tconst remapped = Object.fromEntries(\n\t\tcolumnEntries.map(([columnName, columnDescription]) => [\n\t\t\tcolumnName,\n\t\t\tdrizzleColumnToGraphQLType(columnDescription, columnName, tableName),\n\t\t]),\n\t);\n\n\tfieldMap.set(table, remapped);\n\n\treturn remapped;\n};\n\nconst orderTypeMap = new WeakMap<Object, GraphQLInputObjectType>();\nconst generateTableOrderTypeCached = (table: Table, tableName: string) => {\n\tif (orderTypeMap.has(table)) return orderTypeMap.get(table)!;\n\n\tconst orderColumns = generateTableOrderCached(table);\n\tconst order = new GraphQLInputObjectType({\n\t\tname: `${capitalize(tableName)}OrderBy`,\n\t\tfields: orderColumns,\n\t});\n\n\torderTypeMap.set(table, order);\n\n\treturn order;\n};\n\nconst filterTypeMap = new WeakMap<Object, GraphQLInputObjectType>();\nconst generateTableFilterTypeCached = (table: Table, tableName: string) => {\n\tif (filterTypeMap.has(table)) return filterTypeMap.get(table)!;\n\n\tconst filterColumns = generateTableFilterValuesCached(table, tableName);\n\tconst filters: GraphQLInputObjectType = new GraphQLInputObjectType({\n\t\tname: `${capitalize(tableName)}Filters`,\n\t\tfields: {\n\t\t\t...filterColumns,\n\t\t\tOR: {\n\t\t\t\ttype: new GraphQLList(\n\t\t\t\t\tnew GraphQLNonNull(\n\t\t\t\t\t\tnew GraphQLInputObjectType({\n\t\t\t\t\t\t\tname: `${capitalize(tableName)}FiltersOr`,\n\t\t\t\t\t\t\tfields: filterColumns,\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t},\n\t\t},\n\t});\n\n\tfilterTypeMap.set(table, filters);\n\n\treturn filters;\n};\n\nconst generateSelectFields = <TWithOrder extends boolean>(\n\ttables: Record<string, Table>,\n\ttableName: string,\n\trelationMap: Record<string, Record<string, TableNamedRelations>>,\n\ttypeName: string,\n\twithOrder: TWithOrder,\n\trelationsDepthLimit: number | undefined,\n\tcurrentDepth: number = 0,\n\tusedTables: Set<string> = new Set(),\n): SelectData<TWithOrder> => {\n\tconst relations = relationMap[tableName];\n\tconst relationEntries: [string, TableNamedRelations][] = relations ? Object.entries(relations) : [];\n\n\tconst table = tables[tableName]!;\n\n\tconst order = withOrder\n\t\t? generateTableOrderTypeCached(table, tableName)\n\t\t: undefined;\n\n\tconst filters = generateTableFilterTypeCached(table, tableName);\n\n\tconst tableFields = generateTableSelectTypeFieldsCached(table, tableName);\n\n\tif (\n\t\tusedTables.has(tableName) || (typeof relationsDepthLimit === 'number' && currentDepth >= relationsDepthLimit)\n\t\t|| !relationEntries.length\n\t) {\n\t\treturn {\n\t\t\torder,\n\t\t\tfilters,\n\t\t\ttableFields,\n\t\t\trelationFields: {},\n\t\t} as SelectData<TWithOrder>;\n\t}\n\n\tconst rawRelationFields: [string, ConvertedRelationColumnWithArgs][] = [];\n\tconst updatedUsedTables = new Set(usedTables).add(tableName);\n\tconst newDepth = currentDepth + 1;\n\n\tfor (const [relationName, { targetTableName, relation }] of relationEntries) {\n\t\tconst relTypeName = `${typeName}${capitalize(relationName)}Relation`;\n\t\tconst isOne = is(relation, One);\n\n\t\tconst relData = generateSelectFields(\n\t\t\ttables,\n\t\t\ttargetTableName,\n\t\t\trelationMap,\n\t\t\trelTypeName,\n\t\t\t!isOne,\n\t\t\trelationsDepthLimit,\n\t\t\tnewDepth,\n\t\t\tupdatedUsedTables,\n\t\t);\n\n\t\tconst relType = new GraphQLObjectType({\n\t\t\tname: relTypeName,\n\t\t\tfields: { ...relData.tableFields, ...relData.relationFields },\n\t\t});\n\n\t\tif (isOne) {\n\t\t\trawRelationFields.push([\n\t\t\t\trelationName,\n\t\t\t\t{\n\t\t\t\t\ttype: relType,\n\t\t\t\t\targs: {\n\t\t\t\t\t\twhere: { type: relData.filters },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\trawRelationFields.push([\n\t\t\trelationName,\n\t\t\t{\n\t\t\t\ttype: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(relType))),\n\t\t\t\targs: {\n\t\t\t\t\twhere: { type: relData.filters },\n\t\t\t\t\torderBy: { type: relData.order! },\n\t\t\t\t\toffset: { type: GraphQLInt },\n\t\t\t\t\tlimit: { type: GraphQLInt },\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\tconst relationFields = Object.fromEntries(rawRelationFields);\n\n\treturn { order, filters, tableFields, relationFields } as SelectData<TWithOrder>;\n};\n\nexport const generateTableTypes = <\n\tWithReturning extends boolean,\n>(\n\ttableName: string,\n\ttables: Record<string, Table>,\n\trelationMap: Record<string, Record<string, TableNamedRelations>>,\n\twithReturning: WithReturning,\n\trelationsDepthLimit: number | undefined,\n): GeneratedTableTypes<WithReturning> => {\n\tconst stylizedName = capitalize(tableName);\n\tconst { tableFields, relationFields, filters, order } = generateSelectFields(\n\t\ttables,\n\t\ttableName,\n\t\trelationMap,\n\t\tstylizedName,\n\t\ttrue,\n\t\trelationsDepthLimit,\n\t);\n\n\tconst table = tables[tableName]!;\n\tconst columns = getTableColumns(table);\n\tconst columnEntries = Object.entries(columns);\n\n\tconst insertFields = Object.fromEntries(\n\t\tcolumnEntries.map(([columnName, columnDescription]) => [\n\t\t\tcolumnName,\n\t\t\tdrizzleColumnToGraphQLType(columnDescription, columnName, tableName, false, true, true),\n\t\t]),\n\t);\n\n\tconst updateFields = Object.fromEntries(\n\t\tcolumnEntries.map(([columnName, columnDescription]) => [\n\t\t\tcolumnName,\n\t\t\tdrizzleColumnToGraphQLType(columnDescription, columnName, tableName, true, false, true),\n\t\t]),\n\t);\n\n\tconst insertInput = new GraphQLInputObjectType({\n\t\tname: `${stylizedName}InsertInput`,\n\t\tfields: insertFields,\n\t});\n\n\tconst selectSingleOutput = new GraphQLObjectType({\n\t\tname: `${stylizedName}SelectItem`,\n\t\tfields: { ...tableFields, ...relationFields },\n\t});\n\n\tconst selectArrOutput = new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(selectSingleOutput)));\n\n\tconst singleTableItemOutput = withReturning\n\t\t? new GraphQLObjectType({\n\t\t\tname: `${stylizedName}Item`,\n\t\t\tfields: tableFields,\n\t\t})\n\t\t: undefined;\n\n\tconst arrTableItemOutput = withReturning\n\t\t? new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(singleTableItemOutput!)))\n\t\t: undefined;\n\n\tconst updateInput = new GraphQLInputObjectType({\n\t\tname: `${stylizedName}UpdateInput`,\n\t\tfields: updateFields,\n\t});\n\n\tconst inputs = {\n\t\tinsertInput,\n\t\tupdateInput,\n\t\ttableOrder: order,\n\t\ttableFilters: filters,\n\t};\n\n\tconst outputs = (\n\t\twithReturning\n\t\t\t? {\n\t\t\t\tselectSingleOutput,\n\t\t\t\tselectArrOutput,\n\t\t\t\tsingleTableItemOutput: singleTableItemOutput!,\n\t\t\t\tarrTableItemOutput: arrTableItemOutput!,\n\t\t\t}\n\t\t\t: {\n\t\t\t\tselectSingleOutput,\n\t\t\t\tselectArrOutput,\n\t\t\t}\n\t) as GeneratedTableTypesOutputs<WithReturning>;\n\n\treturn {\n\t\tinputs,\n\t\toutputs,\n\t};\n};\n\nexport const extractOrderBy = <TTable extends Table, TArgs extends OrderByArgs<any> = OrderByArgs<TTable>>(\n\ttable: TTable,\n\torderArgs: TArgs,\n): SQL[] => {\n\tconst res = [] as SQL[];\n\n\tfor (\n\t\tconst [column, config] of Object.entries(orderArgs).sort(\n\t\t\t(a, b) => (b[1]?.priority ?? 0) - (a[1]?.priority ?? 0),\n\t\t)\n\t) {\n\t\tif (!config) continue;\n\t\tconst { direction } = config;\n\n\t\tres.push(direction === 'asc' ? asc(getTableColumns(table)[column]!) : desc(getTableColumns(table)[column]!));\n\t}\n\n\treturn res;\n};\n\nexport const extractFiltersColumn = <TColumn extends Column>(\n\tcolumn: TColumn,\n\tcolumnName: string,\n\toperators: FilterColumnOperators<TColumn>,\n): SQL | undefined => {\n\tif (!operators.OR?.length) delete operators.OR;\n\n\tconst entries = Object.entries(operators as FilterColumnOperatorsCore<TColumn>);\n\n\tif (operators.OR) {\n\t\tif (entries.length > 1) {\n\t\t\tthrow new GraphQLError(`WHERE ${columnName}: Cannot specify both fields and 'OR' in column operators!`);\n\t\t}\n\n\t\tconst variants = [] as SQL[];\n\n\t\tfor (const variant of operators.OR) {\n\t\t\tconst extracted = extractFiltersColumn(column, columnName, variant);\n\n\t\t\tif (extracted) variants.push(extracted);\n\t\t}\n\n\t\treturn variants.length ? (variants.length > 1 ? or(...variants) : variants[0]) : undefined;\n\t}\n\n\tconst variants = [] as SQL[];\n\tfor (const [operatorName, operatorValue] of entries) {\n\t\tif (operatorValue === null || operatorValue === false) continue;\n\n\t\tlet operator: ((...args: any[]) => SQL) | undefined;\n\t\tswitch (operatorName as keyof FilterColumnOperatorsCore<TColumn>) {\n\t\t\t// @ts-ignore\n\t\t\tcase 'eq':\n\t\t\t\toperator = operator ?? eq;\n\t\t\t// @ts-ignore\n\t\t\tcase 'ne':\n\t\t\t\toperator = operator ?? ne;\n\t\t\t// @ts-ignore\n\t\t\tcase 'gt':\n\t\t\t\toperator = operator ?? gt;\n\t\t\t// @ts-ignore\n\t\t\tcase 'gte':\n\t\t\t\toperator = operator ?? gte;\n\t\t\t// @ts-ignore\n\t\t\tcase 'lt':\n\t\t\t\toperator = operator ?? lt;\n\t\t\tcase 'lte':\n\t\t\t\toperator = operator ?? lte;\n\n\t\t\t\tconst singleValue = remapFromGraphQLCore(operatorValue, column, columnName);\n\t\t\t\tvariants.push(operator(column, singleValue));\n\n\t\t\t\tbreak;\n\n\t\t\t// @ts-ignore\n\t\t\tcase 'like':\n\t\t\t\toperator = operator ?? like;\n\t\t\t// @ts-ignore\n\t\t\tcase 'notLike':\n\t\t\t\toperator = operator ?? notLike;\n\t\t\t// @ts-ignore\n\t\t\tcase 'ilike':\n\t\t\t\toperator = operator ?? ilike;\n\t\t\tcase 'notIlike':\n\t\t\t\toperator = operator ?? notIlike;\n\n\t\t\t\tvariants.push(operator(column, operatorValue as string));\n\n\t\t\t\tbreak;\n\n\t\t\t// @ts-ignore\n\t\t\tcase 'inArray':\n\t\t\t\toperator = operator ?? inArray;\n\t\t\tcase 'notInArray':\n\t\t\t\toperator = operator ?? notInArray;\n\n\t\t\t\tif (!(operatorValue as any[]).length) {\n\t\t\t\t\tthrow new GraphQLError(\n\t\t\t\t\t\t`WHERE ${columnName}: Unable to use operator ${operatorName} with an empty array!`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst arrayValue = (operatorValue as any[]).map((val) => remapFromGraphQLCore(val, column, columnName));\n\n\t\t\t\tvariants.push(operator(column, arrayValue));\n\t\t\t\tbreak;\n\n\t\t\t// @ts-ignore\n\t\t\tcase 'isNull':\n\t\t\t\toperator = operator ?? isNull;\n\t\t\tcase 'isNotNull':\n\t\t\t\toperator = operator ?? isNotNull;\n\n\t\t\t\tvariants.push(operator(column));\n\t\t}\n\t}\n\n\treturn variants.length ? (variants.length > 1 ? and(...variants) : variants[0]) : undefined;\n};\n\nexport const extractFilters = <TTable extends Table>(\n\ttable: TTable,\n\ttableName: string,\n\tfilters: Filters<TTable>,\n): SQL | undefined => {\n\tif (!filters.OR?.length) delete filters.OR;\n\n\tconst entries = Object.entries(filters as FiltersCore<TTable>);\n\tif (!entries.length) return;\n\n\tif (filters.OR) {\n\t\tif (entries.length > 1) {\n\t\t\tthrow new GraphQLError(`WHERE ${tableName}: Cannot specify both fields and 'OR' in table filters!`);\n\t\t}\n\n\t\tconst variants = [] as SQL[];\n\n\t\tfor (const variant of filters.OR) {\n\t\t\tconst extracted = extractFilters(table, tableName, variant);\n\t\t\tif (extracted) variants.push(extracted);\n\t\t}\n\n\t\treturn variants.length ? (variants.length > 1 ? or(...variants) : variants[0]) : undefined;\n\t}\n\n\tconst variants = [] as SQL[];\n\tfor (const [columnName, operators] of entries) {\n\t\tif (operators === null) continue;\n\n\t\tconst column = getTableColumns(table)[columnName]!;\n\t\tvariants.push(extractFiltersColumn(column, columnName, operators)!);\n\t}\n\n\treturn variants.length ? (variants.length > 1 ? and(...variants) : variants[0]) : undefined;\n};\n\nconst extractRelationsParamsInner = (\n\trelationMap: Record<string, Record<string, TableNamedRelations>>,\n\ttables: Record<string, Table>,\n\ttableName: string,\n\ttypeName: string,\n\toriginField: ResolveTree,\n\tisInitial: boolean = false,\n) => {\n\tconst relations = relationMap[tableName];\n\tif (!relations) return undefined;\n\n\tconst baseField = Object.entries(originField.fieldsByTypeName).find(([key, value]) => key === typeName)?.[1];\n\tif (!baseField) return undefined;\n\n\tconst args: Record<string, Partial<ProcessedTableSelectArgs>> = {};\n\n\tfor (const [relName, { targetTableName, relation }] of Object.entries(relations)) {\n\t\tconst relTypeName = `${isInitial ? capitalize(tableName) : typeName}${capitalize(relName)}Relation`;\n\t\tconst relFieldSelection = Object.values(baseField).find((field) =>\n\t\t\tfield.name === relName\n\t\t)?.fieldsByTypeName[relTypeName];\n\t\tif (!relFieldSelection) continue;\n\n\t\tconst columns = extractSelectedColumnsFromTree(relFieldSelection, tables[targetTableName]!);\n\n\t\tconst thisRecord: Partial<ProcessedTableSelectArgs> = {};\n\t\tthisRecord.columns = columns;\n\n\t\tconst relationField = Object.values(baseField).find((e) => e.name === relName);\n\t\tconst relationArgs: Partial<TableSelectArgs> | undefined = relationField?.args;\n\n\t\tconst orderBy = relationArgs?.orderBy ? extractOrderBy(tables[targetTableName]!, relationArgs.orderBy!) : undefined;\n\t\tconst where = relationArgs?.where\n\t\t\t? extractFilters(tables[targetTableName]!, relName, relationArgs?.where)\n\t\t\t: undefined;\n\t\tconst offset = relationArgs?.offset ?? undefined;\n\t\tconst limit = relationArgs?.limit ?? undefined;\n\n\t\tthisRecord.orderBy = orderBy;\n\t\tthisRecord.where = where;\n\t\tthisRecord.offset = offset;\n\t\tthisRecord.limit = limit;\n\n\t\tconst relWith = relationField\n\t\t\t? extractRelationsParamsInner(relationMap, tables, targetTableName, relTypeName, relationField)\n\t\t\t: undefined;\n\t\tthisRecord.with = relWith;\n\n\t\targs[relName] = thisRecord;\n\t}\n\n\treturn args;\n};\n\nexport const extractRelationsParams = (\n\trelationMap: Record<string, Record<string, TableNamedRelations>>,\n\ttables: Record<string, Table>,\n\ttableName: string,\n\tinfo: ResolveTree | undefined,\n\ttypeName: string,\n): Record<string, Partial<ProcessedTableSelectArgs>> | undefined => {\n\tif (!info) return undefined;\n\n\treturn extractRelationsParamsInner(relationMap, tables, tableName, typeName, info, true);\n};\n","export const uncapitalize = <T extends string>(input: T) =>\n\t(input.length\n\t\t? `${input[0]!.toLocaleLowerCase()}${input.length > 1 ? input.slice(1, input.length) : ''}`\n\t\t: input) as Uncapitalize<T>;\n\nexport const capitalize = <T extends string>(input: T) =>\n\t(input.length\n\t\t? `${input[0]!.toLocaleUpperCase()}${input.length > 1 ? input.slice(1, input.length) : ''}`\n\t\t: input) as Capitalize<T>;\n","import { type Column, getTableColumns, type Table } from 'drizzle-orm';\nimport { GraphQLError } from 'graphql';\nimport { TableNamedRelations } from '../builders';\n\nexport const remapToGraphQLCore = (\n\tkey: string,\n\tvalue: any,\n\ttableName: string,\n\tcolumn: Column,\n\trelationMap?: Record<string, Record<string, TableNamedRelations>>,\n): any => {\n\tif (value instanceof Date) return value.toISOString();\n\n\tif (value instanceof Buffer) return Array.from(value);\n\n\tif (typeof value === 'bigint') return value.toString();\n\n\tif (Array.isArray(value)) {\n\t\tconst relations = relationMap?.[tableName];\n\t\tif (relations?.[key]) {\n\t\t\treturn remapToGraphQLArrayOutput(\n\t\t\t\tvalue,\n\t\t\t\trelations[key]!.targetTableName,\n\t\t\t\trelations[key]!.relation.referencedTable,\n\t\t\t\trelationMap,\n\t\t\t);\n\t\t}\n\t\tif (column.columnType === 'PgGeometry' || column.columnType === 'PgVector') return value;\n\n\t\treturn value.map((arrVal) => remapToGraphQLCore(key, arrVal, tableName, column, relationMap));\n\t}\n\n\tif (typeof value === 'object') {\n\t\tconst relations = relationMap?.[tableName];\n\t\tif (relations?.[key]) {\n\t\t\treturn remapToGraphQLSingleOutput(\n\t\t\t\tvalue,\n\t\t\t\trelations[key]!.targetTableName,\n\t\t\t\trelations[key]!.relation.referencedTable,\n\t\t\t\trelationMap,\n\t\t\t);\n\t\t}\n\t\tif (column.columnType === 'PgGeometryObject' || column.columnType === 'PgJsonb') {\n\t\t\treturn value;\n\t\t}\n\n\t\treturn JSON.stringify(value);\n\t}\n\n\treturn value;\n};\n\nexport const remapToGraphQLSingleOutput = (\n\tqueryOutput: Record<string, any>,\n\ttableName: string,\n\ttable: Table,\n\trelationMap?: Record<string, Record<string, TableNamedRelations>>,\n) => {\n\tfor (const [key, value] of Object.entries(queryOutput)) {\n\t\tif (value === undefined || value === null) {\n\t\t\tdelete queryOutput[key];\n\t\t} else {\n\t\t\tqueryOutput[key] = remapToGraphQLCore(key, value, tableName, table[key as keyof Table]! as Column, relationMap);\n\t\t}\n\t}\n\n\treturn queryOutput;\n};\n\nexport const remapToGraphQLArrayOutput = (\n\tqueryOutput: Record<string, any>[],\n\ttableName: string,\n\ttable: Table,\n\trelationMap?: Record<string, Record<string, TableNamedRelations>>,\n) => {\n\tfor (const entry of queryOutput) {\n\t\tremapToGraphQLSingleOutput(entry, tableName, table, relationMap);\n\t}\n\n\treturn queryOutput;\n};\n\nexport const remapFromGraphQLCore = (value: any, column: Column, columnName: string) => {\n\tswitch (column.dataType) {\n\t\tcase 'date': {\n\t\t\tconst formatted = new Date(value);\n\t\t\tif (Number.isNaN(formatted.getTime())) throw new GraphQLError(`Field '${columnName}' is not a valid date!`);\n\n\t\t\treturn formatted;\n\t\t}\n\n\t\tcase 'buffer': {\n\t\t\tif (!Array.isArray(value)) {\n\t\t\t\tthrow new GraphQLError(`Field '${columnName}' is not an array!`);\n\t\t\t}\n\n\t\t\treturn Buffer.from(value);\n\t\t}\n\n\t\tcase 'json': {\n\t\t\tif (column.columnType === 'PgGeometryObject') return value;\n\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(value);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new GraphQLError(\n\t\t\t\t\t`Invalid JSON in field '${columnName}':\\n${e instanceof Error ? e.message : 'Unknown error'}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tcase 'array': {\n\t\t\tif (!Array.isArray(value)) {\n\t\t\t\tthrow new GraphQLError(`Field '${columnName}' is not an array!`);\n\t\t\t}\n\n\t\t\tif (column.columnType === 'PgGeometry' && value.length !== 2) {\n\t\t\t\tthrow new GraphQLError(\n\t\t\t\t\t`Invalid float tuple in field '${columnName}': expected array with length of 2, received ${value.length}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\n\t\tcase 'bigint': {\n\t\t\ttry {\n\t\t\t\treturn BigInt(value);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new GraphQLError(`Field '${columnName}' is not a BigInt!`);\n\t\t\t}\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn value;\n\t\t}\n\t}\n};\n\nexport const remapFromGraphQLSingleInput = (queryInput: Record<string, any>, table: Table) => {\n\tfor (const [key, value] of Object.entries(queryInput)) {\n\t\tif (value === undefined) {\n\t\t\tdelete queryInput[key];\n\t\t} else {\n\t\t\tconst column = getTableColumns(table)[key];\n\t\t\tif (!column) throw new GraphQLError(`Unknown column: ${key}`);\n\n\t\t\tif (value === null && column.notNull) {\n\t\t\t\tdelete queryInput[key];\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tqueryInput[key] = remapFromGraphQLCore(value, column, key);\n\t\t}\n\t}\n\n\treturn queryInput;\n};\n\nexport const remapFromGraphQLArrayInput = (queryInput: Record<string, any>[], table: Table) => {\n\tfor (const entry of queryInput) remapFromGraphQLSingleInput(entry, table);\n\n\treturn queryInput;\n};\n","import { is } from 'drizzle-orm';\nimport { MySqlInt, MySqlSerial } from 'drizzle-orm/mysql-core';\nimport { PgInteger, PgSerial } from 'drizzle-orm/pg-core';\nimport { SQLiteInteger } from 'drizzle-orm/sqlite-core';\nimport {\n\tGraphQLBoolean,\n\tGraphQLEnumType,\n\tGraphQLFloat,\n\tGraphQLInputObjectType,\n\tGraphQLInt,\n\tGraphQLList,\n\tGraphQLNonNull,\n\tGraphQLObjectType,\n\tGraphQLScalarType,\n\tGraphQLString,\n} from 'graphql';\n\nimport type { Column } from 'drizzle-orm';\nimport type { PgArray } from 'drizzle-orm/pg-core';\nimport { capitalize } from '../case-ops';\nimport type { ConvertedColumn } from './types';\nimport { GraphQLJson } from './GraphQLJson';\n\nconst allowedNameChars = /^[a-zA-Z0-9_]+$/;\n\nconst enumMap = new WeakMap<Object, GraphQLEnumType>();\nconst generateEnumCached = (column: Column, columnName: string, tableName: string): GraphQLEnumType => {\n\tif (enumMap.has(column)) return enumMap.get(column)!;\n\n\tconst gqlEnum = new GraphQLEnumType({\n\t\tname: `${capitalize(tableName)}${capitalize(columnName)}Enum`,\n\t\tvalues: Object.fromEntries(column.enumValues!.map((e, index) => [allowedNameChars.test(e) ? e : `Option${index}`, {\n\t\t\tvalue: e,\n\t\t\tdescription: `Value: ${e}`,\n\t\t}])),\n\t});\n\n\tenumMap.set(column, gqlEnum);\n\n\treturn gqlEnum;\n};\n\nconst geoXyType = new GraphQLObjectType({\n\tname: 'PgGeometryObject',\n\tfields: {\n\t\tx: { type: GraphQLFloat },\n\t\ty: { type: GraphQLFloat },\n\t},\n});\n\nconst geoXyInputType = new GraphQLInputObjectType({\n\tname: 'PgGeometryObjectInput',\n\tfields: {\n\t\tx: { type: GraphQLFloat },\n\t\ty: { type: GraphQLFloat },\n\t},\n});\n\nconst columnToGraphQLCore = (\n\tcolumn: Column,\n\tcolumnName: string,\n\ttableName: string,\n\tisInput: boolean,\n): ConvertedColumn<boolean> => {\n\tswitch (column.dataType) {\n\t\tcase 'boolean':\n\t\t\treturn { type: GraphQLBoolean, description: 'Boolean' };\n\t\tcase 'json':\n\t\t\treturn column.columnType === 'PgGeometryObject'\n\t\t\t\t? {\n\t\t\t\t\ttype: isInput ? geoXyInputType : geoXyType,\n\t\t\t\t\tdescription: 'Geometry points XY',\n\t\t\t\t}\n\t\t\t\t: { type: GraphQLJson, description: 'JSON' };\n\t\tcase 'date':\n\t\t\treturn { type: GraphQLString, description: 'Date' };\n\t\tcase 'string':\n\t\t\tif (column.enumValues?.length) return { type: generateEnumCached(column, columnName, tableName) };\n\n\t\t\treturn { type: GraphQLString, description: 'String' };\n\t\tcase 'bigint':\n\t\t\treturn { type: GraphQLString, description: 'BigInt' };\n\t\tcase 'number':\n\t\t\treturn is(column, PgInteger)\n\t\t\t\t\t|| is(column, PgSerial)\n\t\t\t\t\t|| is(column, MySqlInt)\n\t\t\t\t\t|| is(column, MySqlSerial)\n\t\t\t\t\t|| is(column, SQLiteInteger)\n\t\t\t\t? { type: GraphQLInt, description: 'Integer' }\n\t\t\t\t: { type: GraphQLFloat, description: 'Float' };\n\t\tcase 'buffer':\n\t\t\treturn { type: new GraphQLList(new GraphQLNonNull(GraphQLInt)), description: 'Buffer' };\n\t\tcase 'array': {\n\t\t\tif (column.columnType === 'PgVector') {\n\t\t\t\treturn {\n\t\t\t\t\ttype: new GraphQLList(new GraphQLNonNull(GraphQLFloat)),\n\t\t\t\t\tdescription: 'Array<Float>',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (column.columnType === 'PgGeometry') {\n\t\t\t\treturn {\n\t\t\t\t\ttype: new GraphQLList(new GraphQLNonNull(GraphQLFloat)),\n\t\t\t\t\tdescription: 'Tuple<[Float, Float]>',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst innerType = columnToGraphQLCore(\n\t\t\t\t(column as Column as PgArray<any, any>).baseColumn,\n\t\t\t\tcolumnName,\n\t\t\t\ttableName,\n\t\t\t\tisInput,\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\ttype: new GraphQLList(new GraphQLNonNull(innerType.type as GraphQLScalarType)),\n\t\t\t\tdescription: `Array<${innerType.description}>`,\n\t\t\t};\n\t\t}\n\t\tcase 'custom':\n\t\tdefault:\n\t\t\tthrow new Error(`Drizzle-GraphQL Error: Type ${column.dataType} is not implemented!`);\n\t}\n};\n\nexport const drizzleColumnToGraphQLType = <TColumn extends Column, TIsInput extends boolean>(\n\tcolumn: TColumn,\n\tcolumnName: string,\n\ttableName: string,\n\tforceNullable = false,\n\tdefaultIsNullable = false,\n\tisInput: TIsInput = false as TIsInput,\n): ConvertedColumn<TIsInput> => {\n\tconst typeDesc = columnToGraphQLCore(column, columnName, tableName, isInput);\n\tconst noDesc = ['string', 'boolean', 'number'];\n\tif (noDesc.find((e) => e === column.dataType)) delete typeDesc.description;\n\n\tif (forceNullable) return typeDesc as ConvertedColumn<TIsInput>;\n\tif (column.notNull && !(defaultIsNullable && (column.hasDefault || column.defaultFn))) {\n\t\treturn {\n\t\t\ttype: new GraphQLNonNull(typeDesc.type),\n\t\t\tdescription: typeDesc.description,\n\t\t} as ConvertedColumn<TIsInput>;\n\t}\n\n\treturn typeDesc as ConvertedColumn<TIsInput>;\n};\n\nexport * from './types';\n","import { GraphQLScalarType, Kind } from 'graphql';\nexport const GraphQLJson = new GraphQLScalarType({\n\tname: 'JSON',\n\tdescription: 'The JSON scalar type represents JSON values as scalars.',\n\tserialize(value) {\n\t\treturn value;\n\t},\n\tparseValue(value) {\n\t\treturn value;\n\t},\n\tparseLiteral(ast) {\n\t\tif (ast.kind === Kind.STRING) {\n\t\t\treturn JSON.parse(ast.value);\n\t\t}\n\t\treturn null;\n\t},\n});\n","import { createTableRelationsHelpers, is, Relation, Relations, Table } from 'drizzle-orm';\nimport { PgColumn, PgDatabase, PgTable } from 'drizzle-orm/pg-core';\nimport {\n\tGraphQLError,\n\tGraphQLInputObjectType,\n\tGraphQLInt,\n\tGraphQLList,\n\tGraphQLNonNull,\n\tGraphQLObjectType,\n} from 'graphql';\n\nimport {\n\textractFilters,\n\textractOrderBy,\n\textractRelationsParams,\n\textractSelectedColumnsFromTree,\n\textractSelectedColumnsFromTreeSQLFormat,\n\tgenerateTableTypes,\n} from '@/util/builders/common';\nimport { capitalize, uncapitalize } from '@/util/case-ops';\nimport {\n\tremapFromGraphQLArrayInput,\n\tremapFromGraphQLSingleInput,\n\tremapToGraphQLArrayOutput,\n\tremapToGraphQLSingleOutput,\n} from '@/util/data-mappers';\nimport { parseResolveInfo } from 'graphql-parse-resolve-info';\n\nimport type { GeneratedEntities } from '@/types';\nimport type { RelationalQueryBuilder } from 'drizzle-orm/mysql-core/query-builders/query';\nimport type { GraphQLFieldConfig, GraphQLFieldConfigArgumentMap, ThunkObjMap } from 'graphql';\nimport type { ResolveTree } from 'graphql-parse-resolve-info';\nimport type { CreatedResolver, Filters, TableNamedRelations, TableSelectArgs } from './types';\n\nconst generateSelectArray = (\n\tdb: PgDatabase<any, any, any>,\n\ttableName: string,\n\ttables: Record<string, Table>,\n\trelationMap: Record<string, Record<string, TableNamedRelations>>,\n\torderArgs: GraphQLInputObjectType,\n\tfilterArgs: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `${uncapitalize(tableName)}`;\n\tconst queryBase = db.query[tableName as keyof typeof db.query] as unknown as\n\t\t| RelationalQueryBuilder<any, any, any>\n\t\t| undefined;\n\tif (!queryBase) {\n\t\tthrow new Error(\n\t\t\t`Drizzle-GraphQL Error: Table ${tableName} not found in drizzle instance. Did you forget to pass schema to drizzle constructor?`,\n\t\t);\n\t}\n\n\tconst queryArgs = {\n\t\toffset: {\n\t\t\ttype: GraphQLInt,\n\t\t},\n\t\tlimit: {\n\t\t\ttype: GraphQLInt,\n\t\t},\n\t\torderBy: {\n\t\t\ttype: orderArgs,\n\t\t},\n\t\twhere: {\n\t\t\ttype: filterArgs,\n\t\t},\n\t} as GraphQLFieldConfigArgumentMap;\n\n\tconst typeName = `${capitalize(tableName)}SelectItem`;\n\tconst table = tables[tableName]!;\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: Partial<TableSelectArgs>, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst { offset, limit, orderBy, where } = args;\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst query = queryBase.findMany({\n\t\t\t\t\tcolumns: extractSelectedColumnsFromTree(\n\t\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\t\ttable,\n\t\t\t\t\t), /*extractSelectedColumnsFromNode(tableSelection, info.fragments, table) */\n\t\t\t\t\toffset,\n\t\t\t\t\tlimit,\n\t\t\t\t\torderBy: orderBy ? extractOrderBy(table, orderBy) : undefined,\n\t\t\t\t\twhere: where ? extractFilters(table, tableName, where) : undefined,\n\t\t\t\t\twith: relationMap[tableName]\n\t\t\t\t\t\t? extractRelationsParams(relationMap, tables, tableName, parsedInfo, typeName)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t});\n\n\t\t\t\tconst result = await query;\n\n\t\t\t\treturn remapToGraphQLArrayOutput(result, tableName, table, relationMap);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateSelectSingle = (\n\tdb: PgDatabase<any, any, any>,\n\ttableName: string,\n\ttables: Record<string, Table>,\n\trelationMap: Record<string, Record<string, TableNamedRelations>>,\n\torderArgs: GraphQLInputObjectType,\n\tfilterArgs: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `${uncapitalize(tableName)}Single`;\n\tconst queryBase = db.query[tableName as keyof typeof db.query] as unknown as\n\t\t| RelationalQueryBuilder<any, any, any>\n\t\t| undefined;\n\tif (!queryBase) {\n\t\tthrow new Error(\n\t\t\t`Drizzle-GraphQL Error: Table ${tableName} not found in drizzle instance. Did you forget to pass schema to drizzle constructor?`,\n\t\t);\n\t}\n\n\tconst queryArgs = {\n\t\toffset: {\n\t\t\ttype: GraphQLInt,\n\t\t},\n\t\torderBy: {\n\t\t\ttype: orderArgs,\n\t\t},\n\t\twhere: {\n\t\t\ttype: filterArgs,\n\t\t},\n\t} as GraphQLFieldConfigArgumentMap;\n\n\tconst typeName = `${capitalize(tableName)}SelectItem`;\n\tconst table = tables[tableName]!;\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: Partial<TableSelectArgs>, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst { offset, orderBy, where } = args;\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst query = queryBase.findFirst({\n\t\t\t\t\tcolumns: extractSelectedColumnsFromTree(\n\t\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\t\ttable,\n\t\t\t\t\t),\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy: orderBy ? extractOrderBy(table, orderBy) : undefined,\n\t\t\t\t\twhere: where ? extractFilters(table, tableName, where) : undefined,\n\t\t\t\t\twith: relationMap[tableName]\n\t\t\t\t\t\t? extractRelationsParams(relationMap, tables, tableName, parsedInfo, typeName)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t});\n\n\t\t\t\tconst result = await query;\n\t\t\t\tif (!result) return undefined;\n\n\t\t\t\treturn remapToGraphQLSingleOutput(result, tableName, table, relationMap);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateInsertArray = (\n\tdb: PgDatabase<any, any, any>,\n\ttableName: string,\n\ttable: PgTable,\n\tbaseType: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `insertInto${capitalize(tableName)}`;\n\tconst typeName = `${capitalize(tableName)}Item`;\n\n\tconst queryArgs: GraphQLFieldConfigArgumentMap = {\n\t\tvalues: {\n\t\t\ttype: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(baseType))),\n\t\t},\n\t};\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: { values: Record<string, any>[] }, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst input = remapFromGraphQLArrayInput(args.values, table);\n\t\t\t\tif (!input.length) throw new GraphQLError('No values were provided!');\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst columns = extractSelectedColumnsFromTreeSQLFormat<PgColumn>(\n\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\ttable,\n\t\t\t\t);\n\n\t\t\t\tconst result = await db.insert(table).values(input).returning(columns)\n\t\t\t\t\t.onConflictDoNothing();\n\n\t\t\t\treturn remapToGraphQLArrayOutput(result, tableName, table);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateInsertSingle = (\n\tdb: PgDatabase<any, any, any>,\n\ttableName: string,\n\ttable: PgTable,\n\tbaseType: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `insertInto${capitalize(tableName)}Single`;\n\tconst typeName = `${capitalize(tableName)}Item`;\n\n\tconst queryArgs: GraphQLFieldConfigArgumentMap = {\n\t\tvalues: {\n\t\t\ttype: new GraphQLNonNull(baseType),\n\t\t},\n\t};\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: { values: Record<string, any> }, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst input = remapFromGraphQLSingleInput(args.values, table);\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst columns = extractSelectedColumnsFromTreeSQLFormat<PgColumn>(\n\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\ttable,\n\t\t\t\t);\n\n\t\t\t\tconst result = await db.insert(table).values(input).returning(columns)\n\t\t\t\t\t.onConflictDoNothing();\n\n\t\t\t\tif (!result[0]) return undefined;\n\n\t\t\t\treturn remapToGraphQLSingleOutput(result[0], tableName, table);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateUpdate = (\n\tdb: PgDatabase<any, any, any>,\n\ttableName: string,\n\ttable: PgTable,\n\tsetArgs: GraphQLInputObjectType,\n\tfilterArgs: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `update${capitalize(tableName)}`;\n\tconst typeName = `${capitalize(tableName)}Item`;\n\n\tconst queryArgs = {\n\t\tset: {\n\t\t\ttype: new GraphQLNonNull(setArgs),\n\t\t},\n\t\twhere: {\n\t\t\ttype: filterArgs,\n\t\t},\n\t} as const satisfies GraphQLFieldConfigArgumentMap;\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: { where?: Filters<Table>; set: Record<string, any> }, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst { where, set } = args;\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst columns = extractSelectedColumnsFromTreeSQLFormat<PgColumn>(\n\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\ttable,\n\t\t\t\t);\n\n\t\t\t\tconst input = remapFromGraphQLSingleInput(set, table);\n\t\t\t\tif (!Object.keys(input).length) throw new GraphQLError('Unable to update with no values specified!');\n\n\t\t\t\tlet query = db.update(table).set(input);\n\t\t\t\tif (where) {\n\t\t\t\t\tconst filters = extractFilters(table, tableName, where);\n\t\t\t\t\tquery = query.where(filters) as any;\n\t\t\t\t}\n\n\t\t\t\tquery = query.returning(columns) as any;\n\n\t\t\t\tconst result = await query;\n\n\t\t\t\treturn remapToGraphQLArrayOutput(result, tableName, table);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateDelete = (\n\tdb: PgDatabase<any, any, any>,\n\ttableName: string,\n\ttable: PgTable,\n\tfilterArgs: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `deleteFrom${capitalize(tableName)}`;\n\tconst typeName = `${capitalize(tableName)}Item`;\n\n\tconst queryArgs = {\n\t\twhere: {\n\t\t\ttype: filterArgs,\n\t\t},\n\t} as const satisfies GraphQLFieldConfigArgumentMap;\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: { where?: Filters<Table> }, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst { where } = args;\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst columns = extractSelectedColumnsFromTreeSQLFormat<PgColumn>(\n\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\ttable,\n\t\t\t\t);\n\n\t\t\t\tlet query = db.delete(table);\n\t\t\t\tif (where) {\n\t\t\t\t\tconst filters = extractFilters(table, tableName, where);\n\t\t\t\t\tquery = query.where(filters) as any;\n\t\t\t\t}\n\n\t\t\t\tquery = query.returning(columns) as any;\n\n\t\t\t\tconst result = await query;\n\n\t\t\t\treturn remapToGraphQLArrayOutput(result, tableName, table);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nexport const generateSchemaData = <\n\tTDrizzleInstance extends PgDatabase<any, any, any>,\n\tTSchema extends Record<string, Table | unknown>,\n>(\n\tdb: TDrizzleInstance,\n\tschema: TSchema,\n\trelationsDepthLimit: number | undefined,\n): GeneratedEntities<TDrizzleInstance, TSchema> => {\n\tconst rawSchema = schema;\n\tconst schemaEntries = Object.entries(rawSchema);\n\n\tconst tableEntries = schemaEntries.filter(([key, value]) => is(value, PgTable)) as [string, PgTable][];\n\tconst tables = Object.fromEntries(tableEntries) as Record<\n\t\tstring,\n\t\tPgTable\n\t>;\n\n\tif (!tableEntries.length) {\n\t\tthrow new Error(\n\t\t\t\"Drizzle-GraphQL Error: No tables detected in Drizzle-ORM's database instance. Did you forget to pass schema to drizzle constructor?\",\n\t\t);\n\t}\n\n\tconst rawRelations = schemaEntries\n\t\t.filter(([key, value]) => is(value, Relations))\n\t\t.map<[string, Relations]>(([key, value]) => [\n\t\t\ttableEntries.find(\n\t\t\t\t([tableName, tableValue]) => tableValue === (value as Relations).table,\n\t\t\t)![0] as string,\n\t\t\tvalue as Relations,\n\t\t]).map<[string, Record<string, Relation>]>(([tableName, relValue]) => [\n\t\t\ttableName,\n\t\t\trelValue.config(createTableRelationsHelpers(tables[tableName]!)),\n\t\t]);\n\n\tconst namedRelations = Object.fromEntries(\n\t\trawRelations\n\t\t\t.map(([relName, config]) => {\n\t\t\t\tconst namedConfig: Record<string, TableNamedRelations> = Object.fromEntries(\n\t\t\t\t\tObject.entries(config).map(([innerRelName, innerRelValue]) => [innerRelName, {\n\t\t\t\t\t\trelation: innerRelValue,\n\t\t\t\t\t\ttargetTableName: tableEntries.find(([tableName, tableValue]) =>\n\t\t\t\t\t\t\ttableValue === innerRelValue.referencedTable\n\t\t\t\t\t\t)![0],\n\t\t\t\t\t}]),\n\t\t\t\t);\n\n\t\t\t\treturn [\n\t\t\t\t\trelName,\n\t\t\t\t\tnamedConfig,\n\t\t\t\t];\n\t\t\t}),\n\t);\n\n\tconst queries: ThunkObjMap<GraphQLFieldConfig<any, any>> = {};\n\tconst mutations: ThunkObjMap<GraphQLFieldConfig<any, any>> = {};\n\tconst gqlSchemaTypes = Object.fromEntries(\n\t\tObject.entries(tables).map(([tableName, table]) => [\n\t\t\ttableName,\n\t\t\tgenerateTableTypes(tableName, tables, namedRelations, true, relationsDepthLimit),\n\t\t]),\n\t);\n\n\tconst inputs: Record<string, GraphQLInputObjectType> = {};\n\tconst outputs: Record<string, GraphQLObjectType> = {};\n\n\tfor (const [tableName, tableTypes] of Object.entries(gqlSchemaTypes)) {\n\t\tconst { insertInput, updateInput, tableFilters, tableOrder } = tableTypes.inputs;\n\t\tconst { selectSingleOutput, selectArrOutput, singleTableItemOutput, arrTableItemOutput } = tableTypes.outputs;\n\n\t\tconst selectArrGenerated = generateSelectArray(\n\t\t\tdb,\n\t\t\ttableName,\n\t\t\ttables,\n\t\t\tnamedRelations,\n\t\t\ttableOrder,\n\t\t\ttableFilters,\n\t\t);\n\t\tconst selectSingleGenerated = generateSelectSingle(\n\t\t\tdb,\n\t\t\ttableName,\n\t\t\ttables,\n\t\t\tnamedRelations,\n\t\t\ttableOrder,\n\t\t\ttableFilters,\n\t\t);\n\t\tconst insertArrGenerated = generateInsertArray(db, tableName, schema[tableName] as PgTable, insertInput);\n\t\tconst insertSingleGenerated = generateInsertSingle(db, tableName, schema[tableName] as PgTable, insertInput);\n\t\tconst updateGenerated = generateUpdate(db, tableName, schema[tableName] as PgTable, updateInput, tableFilters);\n\t\tconst deleteGenerated = generateDelete(db, tableName, schema[tableName] as PgTable, tableFilters);\n\n\t\tqueries[selectArrGenerated.name] = {\n\t\t\ttype: selectArrOutput,\n\t\t\targs: selectArrGenerated.args,\n\t\t\tresolve: selectArrGenerated.resolver,\n\t\t};\n\t\tqueries[selectSingleGenerated.name] = {\n\t\t\ttype: selectSingleOutput,\n\t\t\targs: selectSingleGenerated.args,\n\t\t\tresolve: selectSingleGenerated.resolver,\n\t\t};\n\t\tmutations[insertArrGenerated.name] = {\n\t\t\ttype: arrTableItemOutput,\n\t\t\targs: insertArrGenerated.args,\n\t\t\tresolve: insertArrGenerated.resolver,\n\t\t};\n\t\tmutations[insertSingleGenerated.name] = {\n\t\t\ttype: singleTableItemOutput,\n\t\t\targs: insertSingleGenerated.args,\n\t\t\tresolve: insertSingleGenerated.resolver,\n\t\t};\n\t\tmutations[updateGenerated.name] = {\n\t\t\ttype: arrTableItemOutput,\n\t\t\targs: updateGenerated.args,\n\t\t\tresolve: updateGenerated.resolver,\n\t\t};\n\t\tmutations[deleteGenerated.name] = {\n\t\t\ttype: arrTableItemOutput,\n\t\t\targs: deleteGenerated.args,\n\t\t\tresolve: deleteGenerated.resolver,\n\t\t};\n\t\t[insertInput, updateInput, tableFilters, tableOrder].forEach((e) => (inputs[e.name] = e));\n\t\toutputs[selectSingleOutput.name] = selectSingleOutput;\n\t\toutputs[singleTableItemOutput.name] = singleTableItemOutput;\n\t}\n\n\treturn { queries, mutations, inputs, types: outputs } as any;\n};\n","import { createTableRelationsHelpers, is, Relation, Relations, Table } from 'drizzle-orm';\nimport { BaseSQLiteDatabase, SQLiteColumn, SQLiteTable } from 'drizzle-orm/sqlite-core';\nimport {\n\tGraphQLError,\n\tGraphQLInputObjectType,\n\tGraphQLInt,\n\tGraphQLList,\n\tGraphQLNonNull,\n\tGraphQLObjectType,\n} from 'graphql';\n\nimport {\n\textractFilters,\n\textractOrderBy,\n\textractRelationsParams,\n\textractSelectedColumnsFromTree,\n\textractSelectedColumnsFromTreeSQLFormat,\n\tgenerateTableTypes,\n} from '@/util/builders/common';\nimport { capitalize, uncapitalize } from '@/util/case-ops';\nimport {\n\tremapFromGraphQLArrayInput,\n\tremapFromGraphQLSingleInput,\n\tremapToGraphQLArrayOutput,\n\tremapToGraphQLSingleOutput,\n} from '@/util/data-mappers';\nimport { parseResolveInfo } from 'graphql-parse-resolve-info';\n\nimport type { GeneratedEntities } from '@/types';\nimport type { RelationalQueryBuilder } from 'drizzle-orm/mysql-core/query-builders/query';\nimport type { GraphQLFieldConfig, GraphQLFieldConfigArgumentMap, ThunkObjMap } from 'graphql';\nimport type { ResolveTree } from 'graphql-parse-resolve-info';\nimport type { CreatedResolver, Filters, TableNamedRelations, TableSelectArgs } from './types';\n\nconst generateSelectArray = (\n\tdb: BaseSQLiteDatabase<any, any, any, any>,\n\ttableName: string,\n\ttables: Record<string, Table>,\n\trelationMap: Record<string, Record<string, TableNamedRelations>>,\n\torderArgs: GraphQLInputObjectType,\n\tfilterArgs: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `${uncapitalize(tableName)}`;\n\tconst queryBase = db.query[tableName as keyof typeof db.query] as unknown as\n\t\t| RelationalQueryBuilder<any, any, any>\n\t\t| undefined;\n\tif (!queryBase) {\n\t\tthrow new Error(\n\t\t\t`Drizzle-GraphQL Error: Table ${tableName} not found in drizzle instance. Did you forget to pass schema to drizzle constructor?`,\n\t\t);\n\t}\n\n\tconst queryArgs = {\n\t\toffset: {\n\t\t\ttype: GraphQLInt,\n\t\t},\n\t\tlimit: {\n\t\t\ttype: GraphQLInt,\n\t\t},\n\t\torderBy: {\n\t\t\ttype: orderArgs,\n\t\t},\n\t\twhere: {\n\t\t\ttype: filterArgs,\n\t\t},\n\t} as GraphQLFieldConfigArgumentMap;\n\n\tconst typeName = `${capitalize(tableName)}SelectItem`;\n\tconst table = tables[tableName]!;\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: Partial<TableSelectArgs>, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst { offset, limit, orderBy, where } = args;\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst query = queryBase.findMany({\n\t\t\t\t\tcolumns: extractSelectedColumnsFromTree(\n\t\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\t\ttable,\n\t\t\t\t\t),\n\t\t\t\t\toffset,\n\t\t\t\t\tlimit,\n\t\t\t\t\torderBy: orderBy ? extractOrderBy(table, orderBy) : undefined,\n\t\t\t\t\twhere: where ? extractFilters(table, tableName, where) : undefined,\n\t\t\t\t\twith: relationMap[tableName]\n\t\t\t\t\t\t? extractRelationsParams(relationMap, tables, tableName, parsedInfo, typeName)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t});\n\n\t\t\t\tconst result = await query;\n\n\t\t\t\treturn remapToGraphQLArrayOutput(result, tableName, table, relationMap);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateSelectSingle = (\n\tdb: BaseSQLiteDatabase<any, any, any, any>,\n\ttableName: string,\n\ttables: Record<string, Table>,\n\trelationMap: Record<string, Record<string, TableNamedRelations>>,\n\torderArgs: GraphQLInputObjectType,\n\tfilterArgs: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `${uncapitalize(tableName)}Single`;\n\tconst queryBase = db.query[tableName as keyof typeof db.query] as unknown as\n\t\t| RelationalQueryBuilder<any, any, any>\n\t\t| undefined;\n\tif (!queryBase) {\n\t\tthrow new Error(\n\t\t\t`Drizzle-GraphQL Error: Table ${tableName} not found in drizzle instance. Did you forget to pass schema to drizzle constructor?`,\n\t\t);\n\t}\n\n\tconst queryArgs = {\n\t\toffset: {\n\t\t\ttype: GraphQLInt,\n\t\t},\n\t\torderBy: {\n\t\t\ttype: orderArgs,\n\t\t},\n\t\twhere: {\n\t\t\ttype: filterArgs,\n\t\t},\n\t} as GraphQLFieldConfigArgumentMap;\n\n\tconst typeName = `${capitalize(tableName)}SelectItem`;\n\tconst table = tables[tableName]!;\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: Partial<TableSelectArgs>, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst { offset, orderBy, where } = args;\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst query = queryBase.findFirst({\n\t\t\t\t\tcolumns: extractSelectedColumnsFromTree(\n\t\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\t\ttable,\n\t\t\t\t\t),\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy: orderBy ? extractOrderBy(table, orderBy) : undefined,\n\t\t\t\t\twhere: where ? extractFilters(table, tableName, where) : undefined,\n\t\t\t\t\twith: relationMap[tableName]\n\t\t\t\t\t\t? extractRelationsParams(relationMap, tables, tableName, parsedInfo, typeName)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t});\n\n\t\t\t\tconst result = await query;\n\t\t\t\tif (!result) return undefined;\n\n\t\t\t\treturn remapToGraphQLSingleOutput(result, tableName, table, relationMap);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateInsertArray = (\n\tdb: BaseSQLiteDatabase<any, any, any, any>,\n\ttableName: string,\n\ttable: SQLiteTable,\n\tbaseType: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `insertInto${capitalize(tableName)}`;\n\tconst typeName = `${capitalize(tableName)}Item`;\n\n\tconst queryArgs: GraphQLFieldConfigArgumentMap = {\n\t\tvalues: {\n\t\t\ttype: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(baseType))),\n\t\t},\n\t};\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: { values: Record<string, any>[] }, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst input = remapFromGraphQLArrayInput(args.values, table);\n\t\t\t\tif (!input.length) throw new GraphQLError('No values were provided!');\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst columns = extractSelectedColumnsFromTreeSQLFormat<SQLiteColumn>(\n\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\ttable,\n\t\t\t\t);\n\n\t\t\t\tconst result = await db\n\t\t\t\t\t.insert(table)\n\t\t\t\t\t.values(input)\n\t\t\t\t\t.returning(columns)\n\t\t\t\t\t.onConflictDoNothing();\n\n\t\t\t\treturn remapToGraphQLArrayOutput(result, tableName, table);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateInsertSingle = (\n\tdb: BaseSQLiteDatabase<any, any, any, any>,\n\ttableName: string,\n\ttable: SQLiteTable,\n\tbaseType: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `insertInto${capitalize(tableName)}Single`;\n\tconst typeName = `${capitalize(tableName)}Item`;\n\n\tconst queryArgs: GraphQLFieldConfigArgumentMap = {\n\t\tvalues: {\n\t\t\ttype: new GraphQLNonNull(baseType),\n\t\t},\n\t};\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: { values: Record<string, any> }, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst input = remapFromGraphQLSingleInput(args.values, table);\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst columns = extractSelectedColumnsFromTreeSQLFormat<SQLiteColumn>(\n\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\ttable,\n\t\t\t\t);\n\t\t\t\tconst result = await db.insert(table).values(input).returning(columns).onConflictDoNothing();\n\n\t\t\t\tif (!result[0]) return undefined;\n\n\t\t\t\treturn remapToGraphQLSingleOutput(result[0], tableName, table);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateUpdate = (\n\tdb: BaseSQLiteDatabase<any, any, any, any>,\n\ttableName: string,\n\ttable: SQLiteTable,\n\tsetArgs: GraphQLInputObjectType,\n\tfilterArgs: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `update${capitalize(tableName)}`;\n\tconst typeName = `${capitalize(tableName)}Item`;\n\n\tconst queryArgs = {\n\t\tset: {\n\t\t\ttype: new GraphQLNonNull(setArgs),\n\t\t},\n\t\twhere: {\n\t\t\ttype: filterArgs,\n\t\t},\n\t} as const satisfies GraphQLFieldConfigArgumentMap;\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: { where?: Filters<Table>; set: Record<string, any> }, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst { where, set } = args;\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst columns = extractSelectedColumnsFromTreeSQLFormat<SQLiteColumn>(\n\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\ttable,\n\t\t\t\t);\n\n\t\t\t\tconst input = remapFromGraphQLSingleInput(set, table);\n\t\t\t\tif (!Object.keys(input).length) throw new GraphQLError('Unable to update with no values specified!');\n\n\t\t\t\tlet query = db.update(table).set(input);\n\t\t\t\tif (where) {\n\t\t\t\t\tconst filters = extractFilters(table, tableName, where);\n\t\t\t\t\tquery = query.where(filters) as any;\n\t\t\t\t}\n\n\t\t\t\tquery = query.returning(columns) as any;\n\n\t\t\t\tconst result = await query;\n\n\t\t\t\treturn remapToGraphQLArrayOutput(result, tableName, table);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nconst generateDelete = (\n\tdb: BaseSQLiteDatabase<any, any, any, any>,\n\ttableName: string,\n\ttable: SQLiteTable,\n\tfilterArgs: GraphQLInputObjectType,\n): CreatedResolver => {\n\tconst queryName = `deleteFrom${capitalize(tableName)}`;\n\tconst typeName = `${capitalize(tableName)}Item`;\n\n\tconst queryArgs = {\n\t\twhere: {\n\t\t\ttype: filterArgs,\n\t\t},\n\t} as const satisfies GraphQLFieldConfigArgumentMap;\n\n\treturn {\n\t\tname: queryName,\n\t\tresolver: async (source, args: { where?: Filters<Table> }, context, info) => {\n\t\t\ttry {\n\t\t\t\tconst { where } = args;\n\n\t\t\t\tconst parsedInfo = parseResolveInfo(info, {\n\t\t\t\t\tdeep: true,\n\t\t\t\t}) as ResolveTree;\n\n\t\t\t\tconst columns = extractSelectedColumnsFromTreeSQLFormat<SQLiteColumn>(\n\t\t\t\t\tparsedInfo.fieldsByTypeName[typeName]!,\n\t\t\t\t\ttable,\n\t\t\t\t);\n\n\t\t\t\tlet query = db.delete(table);\n\t\t\t\tif (where) {\n\t\t\t\t\tconst filters = extractFilters(table, tableName, where);\n\t\t\t\t\tquery = query.where(filters) as any;\n\t\t\t\t}\n\n\t\t\t\tquery = query.returning(columns) as any;\n\n\t\t\t\tconst result = await query;\n\n\t\t\t\treturn remapToGraphQLArrayOutput(result, tableName, table);\n\t\t\t} catch (e) {\n\t\t\t\tif (typeof e === 'object' && typeof (<any> e).message === 'string') {\n\t\t\t\t\tthrow new GraphQLError((<any> e).message);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\targs: queryArgs,\n\t};\n};\n\nexport const generateSchemaData = <\n\tTDrizzleInstance extends BaseSQLiteDatabase<any, any, any, any>,\n\tTSchema extends Record<string, Table | unknown>,\n>(\n\tdb: TDrizzleInstance,\n\tschema: TSchema,\n\trelationsDepthLimit: number | undefined,\n): GeneratedEntities<TDrizzleInstance, TSchema> => {\n\tconst rawSchema = schema;\n\tconst schemaEntries = Object.entries(rawSchema);\n\n\tconst tableEntries = schemaEntries.filter(([key, value]) => is(value, SQLiteTable)) as [string, SQLiteTable][];\n\tconst tables = Object.fromEntries(tableEntries) as Record<\n\t\tstring,\n\t\tSQLiteTable\n\t>;\n\n\tif (!tableEntries.length) {\n\t\tthrow new Error(\n\t\t\t\"Drizzle-GraphQL Error: No tables detected in Drizzle-ORM's database instance. Did you forget to pass schema to drizzle constructor?\",\n\t\t);\n\t}\n\n\tconst rawRelations = schemaEntries\n\t\t.filter(([key, value]) => is(value, Relations))\n\t\t.map<[string, Relations]>(([key, value]) => [\n\t\t\ttableEntries.find(\n\t\t\t\t([tableName, tableValue]) => tableValue === (value as Relations).table,\n\t\t\t)![0] as string,\n\t\t\tvalue as Relations,\n\t\t]).map<[string, Record<string, Relation>]>(([tableName, relValue]) => [\n\t\t\ttableName,\n\t\t\trelValue.config(createTableRelationsHelpers(tables[tableName]!)),\n\t\t]);\n\n\tconst namedRelations = Object.fromEntries(\n\t\trawRelations\n\t\t\t.map(([relName, config]) => {\n\t\t\t\tconst namedConfig: Record<string, TableNamedRelations> = Object.fromEntries(\n\t\t\t\t\tObject.entries(config).map(([innerRelName, innerRelValue]) => [innerRelName, {\n\t\t\t\t\t\trelation: innerRelValue,\n\t\t\t\t\t\ttargetTableName: tableEntries.find(([tableName, tableValue]) =>\n\t\t\t\t\t\t\ttableValue === innerRelValue.referencedTable\n\t\t\t\t\t\t)![0],\n\t\t\t\t\t}]),\n\t\t\t\t);\n\n\t\t\t\treturn [\n\t\t\t\t\trelName,\n\t\t\t\t\tnamedConfig,\n\t\t\t\t];\n\t\t\t}),\n\t);\n\n\tconst queries: ThunkObjMap<GraphQLFieldConfig<any, any>> = {};\n\tconst mutations: ThunkObjMap<GraphQLFieldConfig<any, any>> = {};\n\tconst gqlSchemaTypes = Object.fromEntries(\n\t\tObject.entries(tables).map(([tableName, table]) => [\n\t\t\ttableName,\n\t\t\tgenerateTableTypes(tableName, tables, namedRelations, true, relationsDepthLimit),\n\t\t]),\n\t);\n\n\tconst inputs: Record<string, GraphQLInputObjectType> = {};\n\tconst outputs: Record<string, GraphQLObjectType> = {};\n\n\tfor (const [tableName, tableTypes] of Object.entries(gqlSchemaTypes)) {\n\t\tconst { insertInput, updateInput, tableFilters, tableOrder } = tableTypes.inputs;\n\t\tconst { selectSingleOutput, selectArrOutput, singleTableItemOutput, arrTableItemOutput } = tableTypes.outputs;\n\n\t\tconst selectArrGenerated = generateSelectArray(\n\t\t\tdb,\n\t\t\ttableName,\n\t\t\ttables,\n\t\t\tnamedRelations,\n\t\t\ttableOrder,\n\t\t\ttableFilters,\n\t\t);\n\t\tconst selectSingleGenerated = generateSelectSingle(\n\t\t\tdb,\n\t\t\ttableName,\n\t\t\ttables,\n\t\t\tnamedRelations,\n\t\t\ttableOrder,\n\t\t\ttableFilters,\n\t\t);\n\t\tconst insertArrGenerated = generateInsertArray(db, tableName, schema[tableName] as SQLiteTable, insertInput);\n\t\tconst insertSingleGenerated = generateInsertSingle(db, tableName, schema[tableName] as SQLiteTable, insertInput);\n\t\tconst updateGenerated = generateUpdate(\n\t\t\tdb,\n\t\t\ttableName,\n\t\t\tschema[tableName] as SQLiteTable,\n\t\t\tupdateInput,\n\t\t\ttableFilters,\n\t\t);\n\t\tconst deleteGenerated = generateDelete(db, tableName, schema[tableName] as SQLiteTable, tableFilters);\n\n\t\tqueries[selectArrGenerated.name] = {\n\t\t\ttype: selectArrOutput,\n\t\t\targs: selectArrGenerated.args,\n\t\t\tresolve: selectArrGenerated.resolver,\n\t\t};\n\t\tqueries[selectSingleGenerated.name] = {\n\t\t\ttype: selectSingleOutput,\n\t\t\targs: selectSingleGenerated.args,\n\t\t\tresolve: selectSingleGenerated.resolver,\n\t\t};\n\t\tmutations[insertArrGenerated.name] = {\n\t\t\ttype: arrTableItemOutput,\n\t\t\targs: insertArrGenerated.args,\n\t\t\tresolve: insertArrGenerated.resolver,\n\t\t};\n\t\tmutations[insertSingleGenerated.name] = {\n\t\t\ttype: singleTableItemOutput,\n\t\t\targs: insertSingleGenerated.args,\n\t\t\tresolve: insertSingleGenerated.resolver,\n\t\t};\n\t\tmutations[updateGenerated.name] = {\n\t\t\ttype: arrTableItemOutput,\n\t\t\targs: updateGenerated.args,\n\t\t\tresolve: updateGenerated.resolver,\n\t\t};\n\t\tmutations[deleteGenerated.name] = {\n\t\t\ttype: arrTableItemOutput,\n\t\t\targs: deleteGenerated.args,\n\t\t\tresolve: deleteGenerated.resolver,\n\t\t};\n\t\t[insertInput, updateInput, tableFilters, tableOrder].forEach((e) => (inputs[e.name] = e));\n\t\toutputs[selectSingleOutput.name] = selectSingleOutput;\n\t\toutputs[singleTableItemOutput.name] = singleTableItemOutput;\n\t}\n\n\treturn { queries, mutations, inputs, types: outputs } as any;\n};\n"],"mappings":"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","names":["is","MySqlDatabase","PgDatabase","BaseSQLiteDatabase","GraphQLObjectType","is","GraphQLBoolean","GraphQLError","GraphQLInt","GraphQLList","GraphQLNonNull","GraphQLObjectType","getTableColumns","is","GraphQLBoolean","GraphQLEnumType","GraphQLError","GraphQLInputObjectType","GraphQLInt","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLString","getTableColumns","GraphQLInputObjectType","GraphQLNonNull","GraphQLEnumType","GraphQLInt","GraphQLList","GraphQLString","GraphQLBoolean","is","GraphQLObjectType","GraphQLError","variants","GraphQLInt","GraphQLError","GraphQLNonNull","GraphQLList","is","GraphQLObjectType","GraphQLBoolean","createTableRelationsHelpers","is","Relations","GraphQLError","GraphQLInt","GraphQLList","GraphQLNonNull","parseResolveInfo","generateSelectArray","GraphQLInt","GraphQLError","generateSelectSingle","generateInsertArray","GraphQLNonNull","GraphQLList","generateInsertSingle","generateUpdate","generateDelete","generateSchemaData","is","Relations","createTableRelationsHelpers","createTableRelationsHelpers","is","Relations","GraphQLError","GraphQLInt","GraphQLList","GraphQLNonNull","parseResolveInfo","generateSelectArray","GraphQLInt","GraphQLError","generateSelectSingle","generateInsertArray","GraphQLNonNull","GraphQLList","generateInsertSingle","generateUpdate","generateDelete","generateSchemaData","is","Relations","createTableRelationsHelpers","is","MySqlDatabase","PgDatabase","generateSchemaData","BaseSQLiteDatabase","GraphQLObjectType"]}